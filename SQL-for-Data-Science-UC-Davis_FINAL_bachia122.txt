Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

=== SQL CODE ===
SELECT COUNT(*) AS Total_Rec
FROM table_name
================
 	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table =  10000
vii. hours table = 10000
viii. photo table =  10000
ix. review table =  10000
x. tip table =  10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

=== SQL CODE ===
SELECT COUNT(DISTINCT key_name) AS Total_Unq_Rec
FROM table_name
================

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 3979 [key: business_id]
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

Answer: No.
	
	
SQL code used to arrive at answer: 
	SELECT COUNT(*) AS Num_Col
	FROM user
	WHERE column_name IS NULL 

	{{Check result for every column.}}

	

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

=== SQL CODE ===
SELECT MIN(column_name) AS Min, MAX(column_name) AS Max, AVG(column_name) AS Average
FROM table_name
================

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.o	avg: 3.6549 
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

SQL code used to arrive at answer:
	SELECT city, SUM(review_count) AS city_count
	FROM business 
	GROUP BY city
	ORDER BY city_count DESC

	
Copy and Paste the Result Below:	
+-----------------+------------+
| city            | city_count |
+-----------------+------------+
| Las Vegas       |      82854 |
| Phoenix         |      34503 |
| Toronto         |      24113 |
| Scottsdale      |      20614 |
| Charlotte       |      12523 |
| Henderson       |      10871 |
| Tempe           |      10504 |
| Pittsburgh      |       9798 |
| Montréal        |       9448 |
| Chandler        |       8112 |
| Mesa            |       6875 |
| Gilbert         |       6380 |
| Cleveland       |       5593 |
| Madison         |       5265 |
| Glendale        |       4406 |
| Mississauga     |       3814 |
| Edinburgh       |       2792 |
| Peoria          |       2624 |
| North Las Vegas |       2438 |
| Markham         |       2352 |
| Champaign       |       2029 |
| Stuttgart       |       1849 |
| Surprise        |       1520 |
| Lakewood        |       1465 |
| Goodyear        |       1155 |
+-----------------+------------+

(Output limit exceeded, 25 of 362 total rows shown)




6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
	SELECT stars, COUNT(stars) AS count
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars 


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+


ii. Beachwood

SQL code used to arrive at answer:
	SELECT stars, COUNT(stars) AS count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars 

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+		




7. Find the top 3 users based on their total number of reviews:
		
SQL code used to arrive at answer:
	SELECT name, review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3
		
Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+		




8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
Upon checking the table below, the number of fans clearly vary very widely for the top 25 active users, with several having disproportionately fewer fans. If the posed theory were true, the number of fans would steadily decrease with the number of reviews. This was not observed, and thus there is no correlation.

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)

=== SQL CODE ===
SELECT name, review_count, fans
FROM user
ORDER BY review_count DESC
================


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

Answer: There are more reviews with the word "love". (See Output below.)

	
SQL code used to arrive at answer:
	SELECT COUNT(CASE WHEN text LIKE '%love%' THEN 1 END) AS Love 
	, COUNT(CASE WHEN text LIKE '%hate%' THEN 1 END) AS Hate
	FROM review

Output:
+------+------+
| Love | Hate |
+------+------+
| 1780 |  232 |
+------+------+
	


10. Find the top 10 users with the most fans:

SQL code used to arrive at answer:
	SELECT name, fans
	FROM user
	ORDER BY fans DESC
    	LIMIT 10
	
Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

City: Charlotte
Category: Shopping
Answer: In Charlotte, all businesses in the category 'Shopping' are all decently rated, having at least 3.5 stars. None exist with 3 stars or below.

+-------------------------+-------+--------------+---------+
| name                    | stars | review_count | is_open |
+-------------------------+-------+--------------+---------+
| Freeman's Car Stereo    |   3.5 |            8 |       1 |
| Dilworth Custom Framing |   3.5 |            6 |       1 |
| HighLife North Tryon    |   4.0 |            5 |       1 |
+-------------------------+-------+--------------+---------+
SELECT distinct name, stars, review_count, is_open
FROM business INNER JOIN category ON business.id = category.business_id
WHERE business.city = 'Charlotte' AND category.category = 'Shopping'
ORDER BY business.stars ASC


	
i. Do the two groups you chose to analyze have a different distribution of hours?
	Answer: Yes, the businesses below 4 stars only operate on weekdays and Saturdays and start earlier in the day (10AM or earlier), while the 4-star business operates everyday starting from noon.

+-------------------------+-------+--------------+---------+-----------------------+
| name                    | stars | review_count | is_open | hours                 |
+-------------------------+-------+--------------+---------+-----------------------+
| Freeman's Car Stereo    |   3.5 |            8 |       1 | Monday|9:00-19:00     |
| Freeman's Car Stereo    |   3.5 |            8 |       1 | Tuesday|9:00-19:00    |
| Freeman's Car Stereo    |   3.5 |            8 |       1 | Friday|9:00-19:00     |
| Freeman's Car Stereo    |   3.5 |            8 |       1 | Wednesday|9:00-19:00  |
| Freeman's Car Stereo    |   3.5 |            8 |       1 | Thursday|9:00-19:00   |
| Freeman's Car Stereo    |   3.5 |            8 |       1 | Saturday|9:00-17:00   |
| Dilworth Custom Framing |   3.5 |            6 |       1 | Tuesday|10:00-18:00   |
| Dilworth Custom Framing |   3.5 |            6 |       1 | Friday|10:00-18:00    |
| Dilworth Custom Framing |   3.5 |            6 |       1 | Wednesday|10:00-18:00 |
| Dilworth Custom Framing |   3.5 |            6 |       1 | Thursday|10:00-18:00  |
| Dilworth Custom Framing |   3.5 |            6 |       1 | Saturday|10:00-15:00  |
| HighLife North Tryon    |   4.0 |            5 |       1 | Monday|12:00-22:00    |
| HighLife North Tryon    |   4.0 |            5 |       1 | Tuesday|12:00-22:00   |
| HighLife North Tryon    |   4.0 |            5 |       1 | Friday|12:00-22:00    |
| HighLife North Tryon    |   4.0 |            5 |       1 | Wednesday|12:00-22:00 |
| HighLife North Tryon    |   4.0 |            5 |       1 | Thursday|12:00-22:00  |
| HighLife North Tryon    |   4.0 |            5 |       1 | Sunday|12:00-21:00    |
| HighLife North Tryon    |   4.0 |            5 |       1 | Saturday|12:00-22:00  |
+-------------------------+-------+--------------+---------+-----------------------+
SELECT name, stars, review_count, is_open, hours
FROM ((business INNER JOIN category ON business.id = category.business_id) 
INNER JOIN hours ON business.id = hours.business_id)
WHERE business.city = 'Charlotte' AND category.category = 'Shopping'
ORDER BY business.stars ASC



ii. Do the two groups you chose to analyze have a different number of reviews?
	Answer: Yes. Referring to the same table in (i) above, the businesses below 4 stars have slightly more reviews (ie. 8 and 6 reviews) than the business with 4 stars (5 reviews).

         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Yes. Interestingly, based on address, the first two 3.5-rated businesses are much nearer to the Charlotte city centre than the 4-rated business with slightly fewer review count(refer to Output Table below). This may imply that there are more customers for the former due to their convenient location. Interestingly, the third shopping business, located in University City, which notably opens and closes later than the other 2 businesses, may be taking advantage of its location to the nearby university. It is possible that this business is attracting students attending night classes.

SQL code used for analysis:
	SELECT name, neighborhood, address, stars, review_count, hours
	FROM ((business INNER JOIN category ON business.id = category.business_id) 
	INNER JOIN hours ON business.id = hours.business_id)
	WHERE business.city = 'Charlotte' AND category.category = 'Shopping'
	GROUP BY business.address 
		
Output Table:
+-------------------------+-----------------+-------------------------+-------+--------------+----------------------+
| name                    | neighborhood    | address                 | stars | review_count | hours                |
+-------------------------+-----------------+-------------------------+-------+--------------+----------------------+
| Dilworth Custom Framing | South End       | 125 Remount Rd, Ste C-2 |   3.5 |            6 | Saturday|10:00-15:00 |
| Freeman's Car Stereo    |                 | 4821 South Blvd         |   3.5 |            8 | Saturday|9:00-17:00  |
| HighLife North Tryon    | University City | 9605 N Tryon St, Ste C  |   4.0 |            5 | Saturday|12:00-22:00 |
+-------------------------+-----------------+-------------------------+-------+--------------+----------------------+


		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
	


i. Difference 1: Open businesses have consistently more reviews than those that are closed. (See also Difference 2 below, in which average of all data is considered.)
       NOTE: Category filter from part 1 is removed because all "Shopping" businesses in Charlotte are open. All categories are thus considered below.

SQL code used for analysis: 
	SELECT is_open, name, neighborhood, stars, review_count AS reviews, category, hours
	FROM ((business INNER JOIN category ON business.id = category.business_id) 
	INNER JOIN hours ON business.id = hours.business_id)
	WHERE business.city = 'Charlotte' 
	GROUP BY business.name
	ORDER BY business.is_open DESC

Output Table:
+---------+-------------------------------+-----------------+-------+---------+-------------------------+----------------------+
| is_open | name                          | neighborhood    | stars | reviews | category                | hours                |
+---------+-------------------------------+-----------------+-------+---------+-------------------------+----------------------+
|       1 | Camden Fairview               | South Park      |   5.0 |       6 | Home Services           | Saturday|10:00-17:00 |
|       1 | Dilworth Custom Framing       | South End       |   3.5 |       6 | Shopping                | Saturday|10:00-15:00 |
|       1 | Freeman's Car Stereo          |                 |   3.5 |       8 | Car Stereo Installation | Saturday|9:00-17:00  |
|       1 | Gorgeous Glo                  | Myers Park      |   3.5 |      10 | Beauty & Spas           | Saturday|11:00-16:00 |
|       1 | HighLife North Tryon          | University City |   4.0 |       5 | Tobacco Shops           | Saturday|12:00-22:00 |
|       1 | Subway                        |                 |   3.5 |       7 | Sandwiches              | Saturday|10:00-21:00 |
|       0 | Big City Grill                |                 |   5.0 |       4 | Hot Dogs                | Saturday|11:00-20:00 |
|       0 | Journey's Dry Carpet Cleaning | Arboretum       |   5.0 |       3 | Carpet Cleaning         | Saturday|8:00-20:00  |
+---------+-------------------------------+-----------------+-------+---------+-------------------------+----------------------+


ii. Difference 2: Open businesses have a higher average star rating and number of reviews than those that are closed.         
         NOTE: All data are considered.

SQL code used for analysis: 
	SELECT is_open, AVG(stars), AVG(review_count)
	FROM business 
	GROUP BY business.is_open

Output Table:
+---------+---------------+-------------------+
| is_open |    AVG(stars) | AVG(review_count) |
+---------+---------------+-------------------+
|       0 | 3.52039473684 |     23.1980263158 |
|       1 | 3.67900943396 |     31.7570754717 |
+---------+---------------+-------------------+


	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         A. I was curious which business attributes ("amenities") were important to customers, based on:
- average star rating (ie. overall sentiment for an amenity), 
- total reviews (ie. capability of businesses to provide an amenity), and
- overall "demand" which I estimated from multiplying total reviews with average rating. 

	B. I was also curious if users had any tendency to upload photos for any given amenity.

         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

         I joined the Business, Attributes, and Photos tables in one operation. Raw data used for calculating the columns are Attribute name, Business stars, Business review_count, and counted the number of Photo IDs. See (iv) below.

    Top 5 Amenity Results**: 
	A.1.  Star rating 
		>>> must accept bitcoin, insurance, dogs, and credit cards; appointment-only 
		--> establishments with more financial sophistication, security, and (fluffy) inclusivity
	A.2.  Total reviews
		>>> accept credit card; within desired price range; parking and outdoor seating available
  		--> implies widespread use of credit card; significance of budget and parking to consumers
	A.3.  Overall "demand" 
		>>> accept credit card; within desired price range; parking; WiFi
  		--> likely what most consumers pay attention to the most 

** excluded 'None' because unsurprisingly, the majority of users cannot be bothered to identify amenities when leaving reviews. 

        
	B. No correlation found between number of uploaded photos to amenity. It's clear the people who bother to upload photos AND identify amenities are few and far in between. From rough calculations of the data, 2 in 1000 people will upload a single photo to Yelp.



iii. Output of your finished dataset:

 Sample Sorted by "AverageRating":
+----------------------------+---------------+--------------+-----------+----------------+
| Amenity                    | AverageRating | TotalReviews |    Demand | PhotosUploaded |
+----------------------------+---------------+--------------+-----------+----------------+
| BusinessAcceptsBitcoin     |           4.5 |           32 |     144.0 |           None |
| AcceptsInsurance           |           4.3 |           96 |     412.8 |           None |
| ByAppointmentOnly          |           4.2 |          215 |     903.0 |           None |
| DogsAllowed                |           3.9 |          519 |    2024.1 |              1 |
| None                       |           3.7 |       302105 | 1117788.5 |            648 |
| BusinessAcceptsCreditCards |           3.7 |         2370 |    8769.0 |              3 |
----

Sample Sorted by "TotalReviews":
+----------------------------+---------------+--------------+-----------+----------------+
|                    Amenity | AverageRating | TotalReviews |    Demand | PhotosUploaded |
+----------------------------+---------------+--------------+-----------+----------------+
|                       None |           3.7 |       302105 | 1117788.5 |            648 |
| BusinessAcceptsCreditCards |           3.7 |         2370 |    8769.0 |              3 |
|     RestaurantsPriceRange2 |           3.4 |         2164 |    7357.6 |              3 |
|            BusinessParking |           3.5 |         2130 |    7455.0 |              3 |
|                BikeParking |           3.5 |         1983 |    6940.5 |              3 |
|             OutdoorSeating |           3.1 |         1946 |    6032.6 |              3 |
----

Sample Sorted by "Demand":
+----------------------------+---------------+--------------+-----------+----------------+
|                    Amenity | AverageRating | TotalReviews |    Demand | PhotosUploaded |
+----------------------------+---------------+--------------+-----------+----------------+
|                       None |           3.7 |       302105 | 1117788.5 |            648 |
| BusinessAcceptsCreditCards |           3.7 |         2370 |    8769.0 |              3 |
|            BusinessParking |           3.5 |         2130 |    7455.0 |              3 |
|     RestaurantsPriceRange2 |           3.4 |         2164 |    7357.6 |              3 |
|                BikeParking |           3.5 |         1983 |    6940.5 |              3 |
|                       WiFi |           3.4 |         1781 |    6055.4 |              3 |
----


         
iv. Provide the SQL code you used to create your final dataset:

SELECT A.name as Amenity, 
ROUND(AVG(B.stars),1) as AverageRating, 
SUM(B.review_count) AS TotalReviews, 
ROUND(SUM(B.review_count)*ROUND(AVG(B.stars),1),1) AS Demand,
SUM(P.photos) AS PhotosUploaded
FROM business B 

LEFT JOIN (
SELECT business_id, COUNT(photo.id) AS photos 
FROM photo 
GROUP BY business_id
) AS P ON P.business_id = B.id

LEFT JOIN (
SELECT business_id, name, value
FROM attribute 
) AS A ON A.business_id = B.id 

GROUP BY A.name
ORDER BY {{{AverageRating | TotalReviews |  Demand | PhotosUploaded }}} DESC



~ end ~